/*
 * Original source code in C++ from :
 * Copyright 2009, 2010, The Pink Petal Development Team.
 * The Pink Petal Devloment Team are defined as the game's coders 
 * who meet on http://pinkpetal.org     // old site: http://pinkpetal .co.cc
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
namespace WMaster.Concept
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// Keep <see cref="GoldBase"/> info of all brothels. This classe is a sub class of <see cref="GoldBase"/>.
    /// </summary>
    public class Gold : GoldBase
    {
        private SortedDictionary<int, GoldBase> m_Brothels = new SortedDictionary<int, GoldBase>();
        private GoldBase FindBrothelAccount(int id)
        {
            GoldBase acPt = m_Brothels[id];
            if (acPt == null)
            {
                acPt = new GoldBase(0);
                m_Brothels[id] = acPt;
            }
            return acPt;
        }
        public Gold()
            : base()
        {
        }
        public Gold(int initial)
            : base(initial)
        {
        }
        /*
         *	take the brothel's cGold field (m_Finance - replaces
         *	m_Upkeep and m_Income) and add it to the record
         *	Passing the brothel struct so we can record the 
         *	transactions against the brothel ID
         *
         *	(Better would be to pass m_Finance and ID separately
         *	and loosen the module coupling)
         */
        public void BrothelAccounts(Gold g, int brothelId)
        {
            if (g == null)
            {
                WMLog.Trace("Error: can't add gold null value. Parameter is null.", WMLog.TraceLog.ERROR);
                return;
            }
            GoldBase brothelGold = FindBrothelAccount(brothelId);
            if (brothelGold != null)
            {
                brothelGold += g;
                return;
            }
            WMLog.Trace(String.Format("Error: can't find account record for brothel id {0}.", brothelId), WMLog.TraceLog.ERROR);
        }
        public void week_end()
        {
            // TODO : Gold update turn summarry must be generated by IHM process!
            //ostream ss = g_LogFile.ss();

            //ss << gettext("Week End begins: value    = ") << m_value << "\n";
            //ss << gettext("               : income   = ") << m_income << "\n";
            //ss << gettext("               : upkeep   = ") << m_upkeep << "\n";
            //ss << gettext("               : cash in  = ") << m_cash_in << "\n";
            //ss << gettext("               : cash out = ") << m_cash_out << "\n";

            // Add all gold value to current gold and reset it.
            foreach (KeyValuePair<int, GoldBase> item in m_Brothels)
            {
                this.Add(item.Value);

                //ss << gettext("Added Bothel ") << i << gettext(": value    = ") << m_value << "\n";
                //ss << gettext("               : income   = ") << m_income << "\n";
                //ss << gettext("               : upkeep   = ") << m_upkeep << "\n";
                //ss << gettext("               : cash in  = ") << m_cash_in << "\n";
                //ss << gettext("               : cash out = ") << m_cash_out << "\n";
                item.Value.Zero();
            }
            Value += Income;
            Value -= Upkeep;
            Income = Upkeep = Income = CashIn = CashIn = 0;

            //ss << gettext("Week End Final : value    = ") << m_value << "\n";
            //ss << gettext("               : income   = ") << m_income << "\n";
            //ss << gettext("               : upkeep   = ") << m_upkeep << "\n";
            //ss << gettext("               : cash in  = ") << m_cash_in << "\n";
            //ss << gettext("               : cash out = ") << m_cash_out << "\n";
            //g_LogFile.ssend();
        }
        /// <summary>
        /// Return total income of gold with all Brothels.
        /// </summary>
        /// <returns>Total income of gold with all Brothels.</returns>
        public override int TotalIncome()
        {
            double sum = base.TotalIncome();
            foreach (KeyValuePair<int, GoldBase> item in m_Brothels)
            {
                sum += item.Value.TotalIncome();
            }
            return (int)Math.Floor(sum);
        }
        /// <summary>
        /// Return total upkeep of gold with all Brothels.
        /// </summary>
        /// <returns>Total upkeep of gold with all Brothels.</returns>
        public override int TotalUpkeep()
        {
            double sum = base.TotalUpkeep();
            foreach (KeyValuePair<int, GoldBase> item in m_Brothels)
            {
                sum += item.Value.TotalUpkeep();
            }
            return (int)Math.Floor(sum);
        }
        /// <summary>
        /// Return total earned of gold with all Brothels.
        /// </summary>
        /// <returns>Total earned of gold with all Brothels.</returns>
        public override int TotalEarned()
        {
            double sum = base.TotalEarned();
            foreach (KeyValuePair<int, GoldBase> item in m_Brothels)
            {
                sum += item.Value.TotalEarned();
            }
            return (int)Math.Floor(sum);
        }
        /// <summary>
        /// Get total profit (total earned + total upkeep).
        /// </summary>
        /// <returns>Total profit (total earned + total upkeep).</returns>
        public override int TotalProfit()
        {
            return (int)(TotalEarned() - TotalUpkeep());
        }
        void GenReport(int month)
        { ; }
        /// <summary>
        /// Add gold value to this instance.
        /// </summary>
        /// <param name="goldToAdd">Gold values to add.</param>
        public void Add(Gold goldToAdd)
        { this.Add(goldToAdd as GoldBase); }

        public void Add(GoldBase goldToAdd)
        {
            this.Value = goldToAdd.Value;
            this.Income = goldToAdd.Income;
            this.Upkeep = goldToAdd.Upkeep;
        }
    }
}
